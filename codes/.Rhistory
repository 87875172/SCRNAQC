sam <- read.table(samfile,
sep="\t",
quote="",
fill=T,
header=F,
stringsAsFactors=F,
na.strings=NULL,
comment.char="@",
col.names=1:maxncol)
colnames(sam)[1:11] <- c("qname", "flag", "rname", "position", "mapq", "cigar",
"rnext", "pnext", "tlen", "seq", "qual")
# convert to data.table object
samdt <- data.table(sam, check.names=T)
return (samdt)
}
umi.mismatch.correction <- function(samdt, current.ref, umi.window) {
cat("Now processing", current.ref, "...\n")
# Add UMI info to reference data table
rdt <- samdt[rname == current.ref,]
rdt[, c("umi", "inferred_umi") :=
tstrsplit(qname, ":", fixed=TRUE,
keep=length(tstrsplit(qname, ":", fixed=TRUE)))]
# Correct UMIs with sequencing errors by looking at UMIs in surrounding region
# get all alignment positions
unique.pos <- sort(unique(rdt$position))
for (i in unique.pos) {
# Get range data table for position and surrounding window
# get all alignment positions ranging between i-umi.window to i+umi.window
rdt.sub <- rdt[position == i, ]
rdt.flank.5p <- rdt[position >= (i-umi.window) & position <= (i-1), ]
rdt.flank.3p <- rdt[position >= (i+1) & position <= (i+umi.window), ]
rdt.flank <- rbindlist(list(rdt.flank.5p, rdt.flank.3p), use.names=F, fill=F, idcol=F)
# Get all unique UMIs in the region
all.umi.count <- sort(table(c(rdt.sub[,umi], rdt.flank[,umi])))
# Align UMIs to all other UMIs. Assign UMIs with lower counts to
# matching UMI with higher counts
if (length(all.umi.count) > 1) {
sdm <- stringdistmatrix(names(all.umi.count), names(all.umi.count))
diag(sdm) <- 100
rownames(sdm) <- names(all.umi.count)
colnames(sdm) <- names(all.umi.count)
position.umi.count <- sort(table(rdt.sub$umi))
# for umi k at position i
for (k in names(position.umi.count)) {
# Get the min edit distance for that UMI
sdm.min.edit <- min(sdm[k,])
if (sdm.min.edit <= umi.edit) {
# Get the index of the edit distance less than umi.edit with the highest count.
# rownames and colnames of sdm (all.umi.count) is sorted by read counts
# increasingly
sdm.edit.ind <- max(which(sdm[k,] <= umi.edit))
# correct current umi k at position i
if (which(rownames(sdm) == k) < sdm.edit.ind) {
rdt[umi == k & position == i, inferred_umi := colnames(sdm)[sdm.edit.ind]]
}
}
}
}
}
return (rdt)
}
get.adjacent.unique.pos <- function(unique.pos, pos.window) {
adjs <- diff(unique.pos) <= pos.window
ind <- which(adjs == T)
plusone <- ind + 1
return (unique.pos[sort(union(ind, plusone))])
}
alignment.position.correction <- function(rdt, pos.window) {
rdt[,inferred_pos := position]
unique.pos <- sort(unique(rdt$position))
# consider only adjacent positions with window <= pos.window
adj.unique.pos <- get.adjacent.unique.pos(unique.pos, pos.window)
# correct alignment position error
for (i in adj.unique.pos) {
rdt.sub <- rdt[position == i, ]
rdt.flank.5p <- rdt[position >= (i-pos.window) & position <= (i-1), ]
rdt.flank.3p <- rdt[position >= (i+1) & position <= (i+pos.window), ]
rdt.flank <- rbindlist(list(rdt.flank.5p, rdt.flank.3p), use.names=F, fill=F, idcol=F)
# Get all unique UMIs in the region
all.umi.count <- sort(table(c(rdt.sub[,umi], rdt.flank[,umi])))
}
}
samdt <- read.sam(test.sam)
samdt <- read.sam(test.sam)
chr <- mixedsort(setdiff(unique(samdt[,rname]), "*"))
current.ref = chr[3]
current.ref
rdt <- umi.mismatch.correction(samdt, current.ref, umi.window)
rdt
adj.unique.pos <- get.adjacent.unique.pos(unique.pos, pos.window)
unique.pos <- sort(unique(rdt$position))
adj.unique.pos <- get.adjacent.unique.pos(unique.pos, pos.window)
adj.unique.pos
i = adj.unique.pos[1]
i
rdt.sub <- rdt[position == i, ]
rdt.flank.5p <- rdt[position >= (i-pos.window) & position <= (i-1), ]
rdt.flank.3p <- rdt[position >= (i+1) & position <= (i+pos.window), ]
rdt.flank <- rbindlist(list(rdt.flank.5p, rdt.flank.3p), use.names=F, fill=F, idcol=F)
rdt.flank
rdt.sub
all.umi.count <- sort(table(c(rdt.sub[,umi], rdt.flank[,umi])))
all.umi.count
all.umi.count <- sort(table(c(rdt.sub[,inferred_umi], rdt.flank[,inferred_umi])))
all.umi.count
adj.unique.pos
diff(adj.unique.pos)
diff(unique.pos)
adjs <- diff(unique.pos) <= pos.window
adjs
sort(union(ind, plusone))
ind <- which(adjs == T)
plusone <- ind + 1
sort(union(ind, plusone))
unique.pos[sort(union(ind, plusone))]
adjs
adj.unique.pos
diff(adj.unique.pos)
diff(adj.unique.pos) <= pos.window
split(1:10, 1:2)
ind
adj.unique.pos
diff(adj.unique.pos)
ind <- diff(adj.unique.pos) <= pos.window
ind
plusone <- ind + 1
ind
plusone
adjs <- diff(adj.unique.pos) <= pos.window
ind <- which(adjs == T)
plusone <- ind + 1
ind
plusone
adj.unique.pos
split(adj.unique.pos)
split(adj.unique.pos, diff(adj.unique.pos) <= pos.window))
split(adj.unique.pos, diff(adj.unique.pos) <= pos.window)
split(adj.unique.pos, diff(adj.unique.pos))
diff(adj.unique.pos) <= pos.window
adj.unique.pos
sum(adj.unique.pos == F)
adj.unique.pos == F
adj.unique.pos
adjs
adjs == F
sum(adjs == F)
1:(sum(adjs == F) + 1)
list()
list(1)
list(4)
list(1,2,3,4)
adjs
ind
adjs
adj.unique.pos
j = 1
j <- j + 1
j
j = 1
adjs[j]
sum(adjs == F) + 1
m <- sum(adjs == F) + 1
m
adjs[i]
adjs[1]
adjs
i = 1
adj.unique.pos
j
j
res
res <- list()
m <- sum(adjs == F) + 1
i <- 1
j <- 1
while (i <= m) {
if (j == length(adjs)) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
} else if (adjs[j] == T) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
} else if (adjs[j] == F) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
}
j <- j + 1
}
res
res[[1]]
res <- (NA, NA, NA, NA)
res <- c(NA, NA, NA, NA)
res
res <- list(NA, NA, NA, NA)
res
res[[1]]
res[[1]] <- c(res[[1]], adj.unique.pos[j])
res[[1]]
result <- vector("list", n)
n =
5
result <- vector("list", n)
result
n <- sum(adjs == F) + 1
res <- vector("list", n)
n
res
i <- 1
j <- 1
while (i <= m) {
if (j == length(adjs)) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
} else if (adjs[j] == T) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
} else if (adjs[j] == F) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
}
j <- j + 1
}
res
adjs
n <- sum(adjs == F) + 1
res <- vector("list", n)
i <- 1
j <- 1
while (i <= m) {
if (j > length(adjs)) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
} else if (adjs[j] == T) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
} else if (adjs[j] == F) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
}
j <- j + 1
}
res
adjs
n
get.adj.pos.list <- function(adj.unique.pos, pos.window){
adjs <- diff(adj.unique.pos) <= pos.window
n <- sum(adjs == F) + 1
res <- vector("list", n)
i <- 1 # Alignment position group
j <- 1 # index of position
while (i <= n) {
if (j > length(adjs)) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
} else if (adjs[j] == T) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
} else if (adjs[j] == F) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
}
j <- j + 1
}
}
get.adj.pos.list
get.adj.pos.list <- function(adj.unique.pos, pos.window){
adjs <- diff(adj.unique.pos) <= pos.window
n <- sum(adjs == F) + 1
res <- vector("list", n)
i <- 1 # Alignment position group
j <- 1 # index of position
while (i <= n) {
if (j > length(adjs)) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
} else if (adjs[j] == T) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
} else if (adjs[j] == F) {
res[[i]] <- c(res[[i]], adj.unique.pos[j])
i <- i + 1
}
j <- j + 1
}
return (res)
}
get.adj.pos.list(adj.unique.pos, pos.window)
rm(m)
m
get.adj.pos.list(adj.unique.pos, pos.window)
adj.unique.pos
pos.group <- get.adj.pos.list(adj.unique.pos, pos.window)
pos.group
pos.group
for (i in pos.group)
{print(i)}
rdt.sub <- rdt[position == i, ]
rdt.sub <- rdt[position %in% i, ]
rdt.sub
i
i = pos.group[[1]]
i
rdt.sub <- rdt[position %in% i, ]
rdt.sub
rdt.sub$inferred_umi
table(rdt.sub$inferred_umi)
length(table(rdt.sub$inferred_umi))
length(table(rdt.sub$umi))
rdt.sub
pos.group
i
i[1]
rdt[position %in% i, inferred_pos := i[1]]
rdt[position %in% i,]
rdt.sub
rdt.sub[,position]
count(rdt.sub[,position])
table(rdt.sub[,position])
a <- letters[1:3]
table(a, sample(a))
a = c(1,3,5,6,3,4,5,6,23,2,4,4,6,7,71,1,3,4,6,7,3)
a
table(a)
sort(table(a))
sort(table(a), decreasing = T)
rdt.sub[,position]
sort(table(rdt.sub[,position]), decreasing = T)
res <- sort(table(rdt.sub[,position]), decreasing = T)
res
res[which(res == res[1])]
res
res[2]
res[2] = 2
res
res[which(res == res[1])]
names(res[which(res == res[1])])
sort(names(res[which(res == res[1])]))
a = c("22699105", "22699107")
a
a = c("22699105", "22699107", "123", "568")
a
sort(a)
sort(as.numeric(names(res[which(res == res[1])])))
sort(as.numeric(a))
res <- sort(table(rdt.sub[,position]), decreasing = T)
res
sort(as.numeric(names(res[which(res == res[1])])))
res[2] = 2
res
sort(as.numeric(names(res[which(res == res[1])])))
rdt.sub[,position]
position
table(rdt.sub[,position])
a = rdt.sub[,position]
a
a = c(a, 3985,349875,3848473874,394328498,84375)
a
table(a)
res
names(res)
names(res)[1:2]
names(res)[1:2] <- names(res)[2,1]
names(res)[1:2] <- names(res)[c(2,1)]
names
res
sort(as.numeric(names(res[which(res == res[1])])))
sort(as.numeric(names(res[which(res == res[1])])))[1]
rdt.sub
get.position.with.most.reads
get.position.with.most.reads <- function(rdt.sub) {
res <- sort(table(rdt.sub[,position]), decreasing = T)
return (sort(as.numeric(names(res[which(res == res[1])])))[1])
}
get.position.with.most.reads(rdt.sub)
rdt[position %in% i,]
get.position.with.most.reads(rdt.sub)
i
l <- length(table(rdt.sub$inferred_umi)
if () == 1) {
l <- length(table(rdt.sub$inferred_umi))
l
l
i
pos.group
i = pos.group[[2]]
i
l <- length(table(rdt.sub$inferred_umi))
l
rdt.sub$inferred_umi)
rdt.sub$inferred_umi
i = pos.group[[3]]
l <- length(table(rdt.sub$inferred_umi))
l
i = pos.group[[4]]
l <- length(table(rdt.sub$inferred_umi))
l
rdt.sub
l <- length(table(rdt.sub$umi))
i = pos.group[[1]]
i
rdt.sub <- rdt[position %in% i, ]
rdt.sub
l <- length(table(rdt.sub$umi))
l
rdt.sub$umi)
rdt.sub$umi
table(rdt.sub$umi)
l
table(rdt.sub$inferred_umi)
table(rdt.sub$umi)
l
rdt[position %in% i, ]
rdt[position %in% i & inferred_umi == names(umi.count)[j], ]
umi.count <- table(rdt.sub$inferred_umi)
rdt[position %in% i & inferred_umi == names(umi.count)[j], ]
names(umi.count)
umi.count <- table(rdt.sub$umi)
umi.count
names(umi.count)[j]
j
j = 1
names(umi.count)[j]
rdt[position %in% i & inferred_umi == names(umi.count)[j], ]
rdt[(position %in% i) & inferred_umi == names(umi.count)[j], ]
rdt[(position %in% i) & (inferred_umi == names(umi.count)[j]), ]
names(umi.count)[j]
rdt[inferred_umi == names(umi.count)[j]), ]
rdt[inferred_umi == names(umi.count)[j], ]
rdt[inferred_umi, ]
rdt
rdt[inferred_umi==1, ]
rdt[inferred_umi=="TACCT", ]
names(umi.count)[j]
umi.count
j = 2
rdt[(position %in% i) & (inferred_umi == names(umi.count)[j]), ]
rdt[position %in% i & inferred_umi == names(umi.count)[j], ]
rdt.sub[inferred_umi == names(umi.count)[j], ]
umi.count
rdt.sub.sub <- rdt.sub[inferred_umi == names(umi.count)[j], ]
rdt.sub.sub
i
get.position.with.most.reads(rdt.sub.sub)
alignment.position.correction <- function(rdt, pos.window) {
rdt[,inferred_pos := position]
unique.pos <- sort(unique(rdt$position))
# consider only adjacent positions with gap <= pos.window
adj.unique.pos <- get.adjacent.unique.pos(unique.pos, pos.window)
pos.group <- get.adj.pos.list(adj.unique.pos, pos.window)
# correct alignment position error
for (i in pos.group) {
rdt.sub <- rdt[position %in% i, ]
unique.umi.count <- table(rdt.sub$inferred_umi)
for (j in 1:l) {
rdt.sub.sub <- rdt.sub[inferred_umi == names(unique.umi.count)[j], ]
rdt[position %in% i & inferred_umi == names(unique.umi.count)[j],
inferred_pos := get.position.with.most.reads(rdt.sub.sub)]
}
}
return (rdt)
}
current.ref
samdt
umi.window
rdt <- umi.mismatch.correction(samdt, current.ref, umi.window)
rdt
rdt <- alignment.position.correction(rdt, pos.window)
rdt
rdt
rdt[,c(umi,inferred_umi,position,inferred_pos)]
rdt[,.(umi,inferred_umi,position,inferred_pos)]
rdt[,.(umi,inferred_umi,position,inferred_pos)][1:20,]
rdt[,.(umi,inferred_umi,position,inferred_pos)][20:100,]
rdt[position != inferred_pos,.(umi,inferred_umi,position,inferred_pos)]
unique.pos
pos.group
unique.pos
adj.unique.pos
rdt[,inferred_pos == adj.unique.pos]
rdt[,inferred_pos %in% adj.unique.pos]
rdt[inferred_pos %in% adj.unique.pos,]
rdt[inferred_pos %in% adj.unique.pos, .(umi, inferred_umi, position, inferred_pos)]
order(rdt[inferred_pos %in% adj.unique.pos, .(umi, inferred_umi, position, inferred_pos)], Position)
order(rdt[inferred_pos %in% adj.unique.pos, .(umi, inferred_umi, position, inferred_pos)], position)
a = rdt[inferred_pos %in% adj.unique.pos, .(umi, inferred_umi, position, inferred_pos)]
a
a[order(position),]
current.ref = chr[4]
current.ref
rdt <- umi.mismatch.correction(samdt, current.ref, umi.window)
rdt <- alignment.position.correction(rdt, pos.window)
a = rdt[inferred_pos %in% adj.unique.pos, .(umi, inferred_umi, position, inferred_pos)]
a
rdt
rdt[,.(umi, inferred_umi, position, inferred_pos)]
a = rdt[,.(umi, inferred_umi, position, inferred_pos)]
a[order(position),]
a = a[order(position),]
a
a[position != inferred_pos,]
current.ref = chr[5]
rdt <- umi.mismatch.correction(samdt, current.ref, umi.window)
rdt <- alignment.position.correction(rdt, pos.window)
a = rdt[,.(umi, inferred_umi, position, inferred_pos)]
a = a[order(position),]
a[position != inferred_pos,]
a
a[9690220 <= position <= 9690250,]
a[position <= 9690250,]
a[9690220 <= position & position <= 9690250,]
b = a[9690220 <= position & position <= 9690250,]
table(b$position)
table(b$umi)
getwd()
setwd("C:/Users/31410/Google Drive/Boston University/Phdwork/Single_cell_seq/scRNA_pipeline/SCRNAQC/codes")
getwd()
save.image()
